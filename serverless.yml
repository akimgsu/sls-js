service: myserverless
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  profile: cloud_user
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
    imageUploadBucket: ${self:custom.imageUploadBucket}
    region: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: "*"

plugins:
    - serverless-webpack
package:
    individually: true

custom:
  tableName: player-points-table
  bucketName: temp-sls-12355
  imageUploadBucket: temp-sls-12357

functions:
  getPlayerScore:
    handler: src/lambdas/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
          cors: true
  createPlayerScore:
    handler: src/lambdas/createPlayerScore.handler
    events:
      - http:
          path: create-player-score/{ID}
          method: POST
          cors: true
  updatePlayerScore:
    handler: src/lambdas/updatePlayerScore.handler
    events:
      - http:
          path: update-player-score/{ID}
          method: PUT
          cors: true
  getGameScores:
    handler: src/lambdas/getGameScores.handler
    events:
      - http:
          path: get-game-scores/{game}
          method: GET
          cors: true
  createFile:
    handler: src/lambdas/createFile.handler
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true
  getFile:
    handler: src/lambdas/getFile.handler
    events:
      - http:
          path: get-file/{fileName}
          method: GET
          cors: true
  sendEmail:
    handler: src/lambdas/sendEmail.handler
    events:
      - http:
          path: send-email
          method: POST
          cors: true
  imageUpload:
    handler: src/lambdas/imageUpload.handler
    events:
      - http:
          path: image-upload
          method: POST
          cors: true
  imageResize:
    handler: src/lambdas/imageResize.handler
    events:
      - s3:
          bucket: ${self:custom.imageUploadBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
          existing: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageUploadBucket}
        AccessControl: PublicRead
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: game
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: game-index
            KeySchema:
              - AttributeName: game
                KeyType: HASH
            Projection:
              ProjectionType: ALL
